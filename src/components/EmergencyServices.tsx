
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Ambulance, Phone, MapPin, Clock, Navigation, AlertTriangle } from "lucide-react";
import GovernmentHealthSchemes from "@/components/GovernmentHealthSchemes";
import { useToast } from "@/hooks/use-toast";

interface EmergencyServicesProps {
  language: string;
}

const EmergencyServices = ({ language }: EmergencyServicesProps) => {
  const [emergencyActive, setEmergencyActive] = useState(false);
  const [locationShared, setLocationShared] = useState(false);
  const [ambulanceTracking, setAmbulanceTracking] = useState(false);
  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null);
  const [locationError, setLocationError] = useState<string | null>(null);
  const [ambulanceLocation, setAmbulanceLocation] = useState({ lat: 13.0037, lng: 76.1024 });
  const [estimatedArrival, setEstimatedArrival] = useState("12-15");
  const { toast } = useToast();

  const text = {
    en: {
      title: "Emergency Services",
      subtitle: "Immediate Help & Ambulance Services",
      callAmbulance: "Call Ambulance (108)",
      shareLocation: "Share My Location",
      trackAmbulance: "Track Ambulance",
      emergencyContacts: "Emergency Contacts",
      locationShared: "Location Shared Successfully",
      locationSharedDesc: "Your exact location has been shared with emergency services",
      ambulanceCalled: "üö® Ambulance Called!",
      ambulanceCalledDesc: "Emergency services notified. Help is on the way!",
      trackingStarted: "üìç Tracking Started",
      trackingStartedDesc: "You can now see ambulance location in real-time",
      estimatedArrival: "Estimated Arrival",
      distance: "Distance",
      status: "Status",
      onRoute: "On Route",
      dispatched: "Dispatched",
      arrived: "Arrived",
      yourLocation: "Your Location",
      ambulanceLocation: "Ambulance Location",
      emergencyTips: "Emergency Tips",
      tip1: "Stay calm and speak clearly",
      tip2: "Provide exact location details",
      tip3: "Don't hang up until told to do so",
      tip4: "Keep the patient comfortable",
      police: "Police: 100",
      fire: "Fire: 101",
      helpline: "Women Helpline: 1091",
      gettingLocation: "Getting your location...",
      locationError: "Unable to get location",
      allowLocation: "Please allow location access",
      locationAccuracy: "Location Accuracy"
    },
    kn: {
      title: "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥Å",
      subtitle: "‡≤§‡≤ï‡≥ç‡≤∑‡≤£‡≤¶ ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥Å",
      callAmbulance: "‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤ï‡≤∞‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø (108)",
      shareLocation: "‡≤®‡≤®‡≥ç‡≤® ‡≤∏‡≥ç‡≤•‡≤≥ ‡≤π‡≤Ç‡≤ö‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø",
      trackAmbulance: "‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
      emergencyContacts: "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ó‡≤≥‡≥Å",
      locationShared: "‡≤∏‡≥ç‡≤•‡≤≥ ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤π‡≤Ç‡≤ö‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
      locationSharedDesc: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤®‡≤ø‡≤ñ‡≤∞ ‡≤∏‡≥ç‡≤•‡≤≥‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤π‡≤Ç‡≤ö‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
      ambulanceCalled: "üö® ‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤ï‡≤∞‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!",
      ambulanceCalledDesc: "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤§‡≤ø‡≤≥‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤¨‡≤∞‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü!",
      trackingStarted: "üìç ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
      trackingStartedDesc: "‡≤®‡≥Ä‡≤µ‡≥Å ‡≤à‡≤ó ‡≤∞‡≤ø‡≤Ø‡≤≤‡≥ç-‡≤ü‡≥à‡≤Æ‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤∏‡≥ç‡≤•‡≤≥‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥ã‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å",
      estimatedArrival: "‡≤Ö‡≤Ç‡≤¶‡≤æ‡≤ú‡≥Å ‡≤Ü‡≤ó‡≤Æ‡≤®",
      distance: "‡≤¶‡≥Ç‡≤∞",
      status: "‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø",
      onRoute: "‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø",
      dispatched: "‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü",
      arrived: "‡≤Ü‡≤ó‡≤Æ‡≤ø‡≤∏‡≤ø‡≤¶‡≥Ü",
      yourLocation: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥ç‡≤•‡≤≥",
      ambulanceLocation: "‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤∏‡≥ç‡≤•‡≤≥",
      emergencyTips: "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å",
      tip1: "‡≤∂‡≤æ‡≤Ç‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥ç‡≤™‡≤∑‡≥ç‡≤ü‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø",
      tip2: "‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤∏‡≥ç‡≤•‡≤≥‡≤¶ ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤°‡≤ø",
      tip3: "‡≤π‡≥á‡≤≥‡≥Å‡≤µ‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤´‡≥ã‡≤®‡≥ç ‡≤ï‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤¨‡≥á‡≤°‡≤ø",
      tip4: "‡≤∞‡≥ã‡≤ó‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤∞‡≤æ‡≤Æ‡≤¶‡≤æ‡≤Ø‡≤ï‡≤µ‡≤æ‡≤ó‡≤ø ‡≤á‡≤∞‡≤ø‡≤∏‡≤ø",
      police: "‡≤™‡≥ä‡≤≤‡≥Ä‡≤∏‡≥ç: 100",
      fire: "‡≤Ö‡≤ó‡≥ç‡≤®‡≤ø‡≤∂‡≤æ‡≤Æ‡≤ï: 101",
      helpline: "‡≤Æ‡≤π‡≤ø‡≤≥‡≤æ ‡≤∏‡≤π‡≤æ‡≤Ø‡≤µ‡≤æ‡≤£‡≤ø: 1091",
      gettingLocation: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥ç‡≤•‡≤≥‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...",
      locationError: "‡≤∏‡≥ç‡≤•‡≤≥‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤",
      allowLocation: "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤∏‡≥ç‡≤•‡≤≥‡≤¶ ‡≤™‡≥ç‡≤∞‡≤µ‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤®‡≥Å‡≤Æ‡≤§‡≤ø‡≤∏‡≤ø",
      locationAccuracy: "‡≤∏‡≥ç‡≤•‡≤≥‡≤¶ ‡≤®‡≤ø‡≤ñ‡≤∞‡≤§‡≥Ü"
    }
  };

  const currentText = text[language];

  // Get user's current location
  const getCurrentLocation = () => {
    if (!navigator.geolocation) {
      setLocationError("Geolocation is not supported by this browser");
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const location = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        setUserLocation(location);
        setLocationError(null);
        console.log("User location obtained:", location);
      },
      (error) => {
        console.error("Location error:", error);
        setLocationError(error.message);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      }
    );
  };

  // Simulate ambulance movement
  useEffect(() => {
    if (ambulanceTracking) {
      const interval = setInterval(() => {
        setAmbulanceLocation(prev => ({
          lat: prev.lat + (Math.random() - 0.5) * 0.001,
          lng: prev.lng + (Math.random() - 0.5) * 0.001
        }));
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [ambulanceTracking]);

  const handleCallAmbulance = () => {
    setEmergencyActive(true);
    setAmbulanceTracking(true);
    toast({
      title: currentText.ambulanceCalled,
      description: currentText.ambulanceCalledDesc
    });

    // Simulate emergency response
    setTimeout(() => {
      setEmergencyActive(false);
    }, 3000);
  };

  const handleShareLocation = () => {
    if (!userLocation) {
      getCurrentLocation();
      toast({
        title: currentText.gettingLocation,
        description: currentText.allowLocation
      });
      return;
    }

    setLocationShared(true);
    toast({
      title: currentText.locationShared,
      description: `${currentText.locationSharedDesc}\nLat: ${userLocation.lat.toFixed(6)}, Lng: ${userLocation.lng.toFixed(6)}`
    });

    // Simulate sharing location with emergency services
    console.log("Location shared with emergency services:", userLocation);
  };

  const handleTrackAmbulance = () => {
    setAmbulanceTracking(true);
    toast({
      title: currentText.trackingStarted,
      description: currentText.trackingStartedDesc
    });
  };

  const calculateDistance = () => {
    if (!userLocation) return "Unknown";
    
    const distance = Math.sqrt(
      Math.pow(ambulanceLocation.lat - userLocation.lat, 2) + 
      Math.pow(ambulanceLocation.lng - userLocation.lng, 2)
    ) * 100; // Rough conversion
    return distance.toFixed(1);
  };

  return (
    <div className="space-y-4">
      {/* Header */}
      <Card className="bg-gradient-to-r from-red-50 to-orange-50 border-red-200">
        <CardHeader className="pb-3">
          <CardTitle className="text-lg text-red-800 flex items-center gap-2">
            <AlertTriangle className="h-5 w-5" />
            {currentText.title}
          </CardTitle>
          <p className="text-sm text-red-600">{currentText.subtitle}</p>
        </CardHeader>
      </Card>

      {/* Emergency Action Buttons */}
      <div className="grid grid-cols-1 gap-3">
        {/* Call Ambulance */}
        <Card className={`border-2 ${emergencyActive ? 'border-red-500 bg-red-50' : 'border-red-300 bg-red-50'} transition-all duration-300`}>
          <CardContent className="p-4">
            <Button
              onClick={handleCallAmbulance}
              disabled={emergencyActive}
              className={`w-full h-14 text-lg font-bold ${
                emergencyActive 
                  ? 'bg-red-700 hover:bg-red-800 animate-pulse' 
                  : 'bg-red-600 hover:bg-red-700'
              }`}
            >
              <Phone className="h-6 w-6 mr-2" />
              {emergencyActive 
                ? (language === "en" ? "üö® CALLING 108..." : "üö® 108 ‡≤ó‡≥Ü ‡≤ï‡≤∞‡≥Ü ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...")
                : currentText.callAmbulance
              }
            </Button>
          </CardContent>
        </Card>

        {/* Share Location */}
        <Card className="border-blue-200 bg-blue-50">
          <CardContent className="p-4">
            <Button
              onClick={handleShareLocation}
              className="w-full h-12 bg-blue-600 hover:bg-blue-700"
              variant={locationShared ? "secondary" : "default"}
            >
              <MapPin className="h-5 w-5 mr-2" />
              {locationShared 
                ? (language === "en" ? "‚úÖ Location Shared" : "‚úÖ ‡≤∏‡≥ç‡≤•‡≤≥ ‡≤π‡≤Ç‡≤ö‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü")
                : currentText.shareLocation
              }
            </Button>
            
            {/* Location Details */}
            {userLocation && (
              <div className="mt-3 p-3 bg-white/80 rounded-lg">
                <div className="text-xs text-blue-700 space-y-1">
                  <div className="flex justify-between">
                    <span className="font-medium">üìç {currentText.yourLocation}:</span>
                  </div>
                  <div className="font-mono text-xs">
                    Lat: {userLocation.lat.toFixed(6)}
                  </div>
                  <div className="font-mono text-xs">
                    Lng: {userLocation.lng.toFixed(6)}
                  </div>
                  <div className="flex items-center gap-1 text-green-600">
                    <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                    <span>{currentText.locationAccuracy}: High</span>
                  </div>
                </div>
              </div>
            )}
            
            {locationError && (
              <div className="mt-2 text-xs text-red-600 text-center">
                ‚ö†Ô∏è {currentText.locationError}: {locationError}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Track Ambulance */}
        <Card className="border-green-200 bg-green-50">
          <CardContent className="p-4">
            <Button
              onClick={handleTrackAmbulance}
              className="w-full h-12 bg-green-600 hover:bg-green-700"
              variant={ambulanceTracking ? "secondary" : "default"}
            >
              <Navigation className="h-5 w-5 mr-2" />
              {ambulanceTracking 
                ? (language === "en" ? "üöë Tracking Active" : "üöë ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø")
                : currentText.trackAmbulance
              }
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Ambulance Tracking Info */}
      {ambulanceTracking && (
        <Card className="border-green-200 bg-green-50">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg text-green-800 flex items-center gap-2">
              <Ambulance className="h-5 w-5" />
              {language === "en" ? "Live Ambulance Tracking" : "‡≤≤‡≥à‡≤µ‡≥ç ‡≤Ü‡≤Ç‡≤¨‡≥Å‡≤≤‡≥Ü‡≤®‡≥ç‡≤∏‡≥ç ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç"}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <Badge className="bg-green-100 text-green-700 mb-2">
                  {currentText.status}
                </Badge>
                <p className="text-sm font-semibold text-green-800">{currentText.onRoute}</p>
              </div>
              <div className="text-center">
                <Badge className="bg-blue-100 text-blue-700 mb-2">
                  {currentText.distance}
                </Badge>
                <p className="text-sm font-semibold text-blue-800">{calculateDistance()} km</p>
              </div>
            </div>

            <div className="bg-white/80 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-700">{currentText.estimatedArrival}:</span>
                <span className="text-sm font-bold text-green-700">{estimatedArrival} min</span>
              </div>
              
              <div className="space-y-2 text-xs text-gray-600">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                  <span>
                    {currentText.yourLocation}: 
                    {userLocation 
                      ? ` ${userLocation.lat.toFixed(4)}, ${userLocation.lng.toFixed(4)}`
                      : " Location not available"
                    }
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                  <span>
                    {currentText.ambulanceLocation}: 
                    {` ${ambulanceLocation.lat.toFixed(4)}, ${ambulanceLocation.lng.toFixed(4)}`}
                  </span>
                </div>
              </div>

              <div className="mt-3 bg-gray-200 rounded-full h-2">
                <div className="bg-green-500 h-2 rounded-full animate-pulse" style={{width: '60%'}}></div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Government Health Schemes */}
      <GovernmentHealthSchemes language={language} />
    </div>
  );
};

export default EmergencyServices;
