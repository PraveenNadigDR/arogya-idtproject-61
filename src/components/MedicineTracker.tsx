
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Camera, Bell, Clock, Calendar, Pill } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface MedicineTrackerProps {
  language: string;
}

const MedicineTracker = ({ language }: MedicineTrackerProps) => {
  const [scanning, setScanning] = useState(false);
  const { toast } = useToast();

  const text = {
    en: {
      title: "Medicine Tracker",
      subtitle: "Scan, Track & Remember",
      scanMedicine: "Scan Medicine",
      addReminder: "Add Reminder",
      todaysReminders: "Today's Reminders",
      upcoming: "Upcoming",
      taken: "Taken",
      missed: "Missed",
      dosage: "Dosage",
      frequency: "Frequency",
      beforeMeals: "Before meals",
      afterMeals: "After meals",
      morning: "Morning",
      afternoon: "Afternoon",
      evening: "Evening",
      night: "Night"
    },
    kn: {
      title: "‡≤î‡≤∑‡≤ß ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤∞‡≥ç",
      subtitle: "‡≤∏‡≥ç‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç, ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≥Ü‡≤®‡≤™‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø",
      scanMedicine: "‡≤î‡≤∑‡≤ß ‡≤∏‡≥ç‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
      addReminder: "‡≤ú‡≥ç‡≤û‡≤æ‡≤™‡≤®‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø",
      todaysReminders: "‡≤á‡≤Ç‡≤¶‡≤ø‡≤® ‡≤ú‡≥ç‡≤û‡≤æ‡≤™‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å",
      upcoming: "‡≤Æ‡≥Å‡≤Ç‡≤¨‡≤∞‡≥Å‡≤µ",
      taken: "‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü",
      missed: "‡≤§‡≤™‡≥ç‡≤™‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü",
      dosage: "‡≤™‡≥ç‡≤∞‡≤Æ‡≤æ‡≤£",
      frequency: "‡≤Ü‡≤µ‡≤∞‡≥ç‡≤§‡≤®",
      beforeMeals: "‡≤ä‡≤ü‡≤¶ ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥Å",
      afterMeals: "‡≤ä‡≤ü‡≤¶ ‡≤®‡≤Ç‡≤§‡≤∞",
      morning: "‡≤¨‡≥Ü‡≤≥‡≤ø‡≤ó‡≥ç‡≤ó‡≥Ü",
      afternoon: "‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤π‡≥ç‡≤®",
      evening: "‡≤∏‡≤Ç‡≤ú‡≥Ü",
      night: "‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø"
    }
  };

  const currentText = text[language];

  const todaysMedicines = [
    {
      id: 1,
      name: "Metformin 500mg",
      time: "08:00 AM",
      dosage: "1 tablet",
      timing: language === "en" ? "After breakfast" : "‡≤¨‡≥Ü‡≤≥‡≤ø‡≤ó‡≥ç‡≤ó‡≤ø‡≤® ‡≤ä‡≤ü‡≤¶ ‡≤®‡≤Ç‡≤§‡≤∞",
      status: "taken",
      takenAt: "08:15 AM"
    },
    {
      id: 2,
      name: "Vitamin D3",
      time: "01:00 PM",
      dosage: "1 capsule",
      timing: language === "en" ? "After lunch" : "‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤π‡≥ç‡≤®‡≤¶ ‡≤ä‡≤ü‡≤¶ ‡≤®‡≤Ç‡≤§‡≤∞",
      status: "upcoming",
      takenAt: null
    },
    {
      id: 3,
      name: "Blood Pressure Medicine",
      time: "08:00 PM",
      dosage: "1/2 tablet",
      timing: language === "en" ? "After dinner" : "‡≤∞‡≤æ‡≤§‡≥ç‡≤∞‡≤ø‡≤Ø ‡≤ä‡≤ü‡≤¶ ‡≤®‡≤Ç‡≤§‡≤∞",
      status: "upcoming",
      takenAt: null
    },
    {
      id: 4,
      name: "Calcium",
      time: "09:00 AM",
      dosage: "1 tablet",
      timing: language === "en" ? "Before breakfast" : "‡≤¨‡≥Ü‡≤≥‡≤ø‡≤ó‡≥ç‡≤ó‡≤ø‡≤® ‡≤ä‡≤ü‡≤¶ ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥Å",
      status: "missed",
      takenAt: null
    }
  ];

  const handleScanMedicine = () => {
    setScanning(true);
    toast({
      title: language === "en" ? "üì∑ Scanning Medicine..." : "üì∑ ‡≤î‡≤∑‡≤ß‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥ç‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...",
      description: language === "en" 
        ? "Point camera at medicine package" 
        : "‡≤î‡≤∑‡≤ß‡≤¶ ‡≤™‡≥ç‡≤Ø‡≤æ‡≤ï‡≥á‡≤ú‡≥ç‚Äå‡≤® ‡≤Æ‡≥á‡≤≤‡≥Ü ‡≤ï‡≥ç‡≤Ø‡≤æ‡≤Æ‡≥Ü‡≤∞‡≤æ‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥ã‡≤∞‡≤ø‡≤∏‡≤ø"
    });

    // Simulate scanning
    setTimeout(() => {
      setScanning(false);
      toast({
        title: language === "en" ? "‚úÖ Medicine Recognized!" : "‚úÖ ‡≤î‡≤∑‡≤ß‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!",
        description: language === "en" 
          ? "Paracetamol 650mg - Added to your tracker" 
          : "‡≤™‡≥ç‡≤Ø‡≤æ‡≤∞‡≤æ‡≤∏‡≤ø‡≤ü‡≤Æ‡≤æ‡≤≤‡≥ç 650mg - ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤∞‡≥ç‚Äå‡≤ó‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü"
      });
    }, 3000);
  };

  const handleMedicineTaken = (medicineId: number) => {
    toast({
      title: language === "en" ? "‚úÖ Medicine Taken!" : "‚úÖ ‡≤î‡≤∑‡≤ß ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü!",
      description: language === "en" 
        ? "Recorded in your health diary" 
        : "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤°‡≥à‡≤∞‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≤æ‡≤ñ‡≤≤‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü"
    });
  };

  const getStatusColor = (status: string) => {
    switch(status) {
      case "taken": return "bg-green-100 text-green-800";
      case "upcoming": return "bg-blue-100 text-blue-800";
      case "missed": return "bg-red-100 text-red-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: string) => {
    switch(status) {
      case "taken": return currentText.taken;
      case "upcoming": return currentText.upcoming;
      case "missed": return currentText.missed;
      default: return status;
    }
  };

  return (
    <div className="space-y-4">
      {/* Header */}
      <Card className="bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200">
        <CardHeader className="pb-3">
          <CardTitle className="text-lg text-purple-800 flex items-center gap-2">
            <Pill className="h-5 w-5" />
            {currentText.title}
          </CardTitle>
          <p className="text-sm text-purple-600">{currentText.subtitle}</p>
        </CardHeader>
      </Card>

      {/* Scan Medicine */}
      <div className="grid grid-cols-2 gap-3">
        <Button 
          onClick={handleScanMedicine}
          disabled={scanning}
          className={`h-16 flex-col bg-blue-600 hover:bg-blue-700 ${scanning ? 'animate-pulse' : ''}`}
        >
          <Camera className="h-6 w-6 mb-1" />
          <span className="text-sm">{currentText.scanMedicine}</span>
        </Button>
        
        <Button 
          variant="outline"
          className="h-16 flex-col border-green-300 text-green-700 hover:bg-green-50"
        >
          <Bell className="h-6 w-6 mb-1" />
          <span className="text-sm">{currentText.addReminder}</span>
        </Button>
      </div>

      {/* Today's Reminders */}
      <div>
        <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
          <Calendar className="h-4 w-4" />
          {currentText.todaysReminders}
        </h3>
        
        <div className="space-y-3">
          {todaysMedicines.map((medicine) => (
            <Card key={medicine.id} className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-800">{medicine.name}</h4>
                    <div className="flex items-center gap-2 text-sm text-gray-600 mt-1">
                      <Clock className="h-3 w-3" />
                      <span>{medicine.time}</span>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      {medicine.dosage} ‚Ä¢ {medicine.timing}
                    </p>
                    {medicine.takenAt && (
                      <p className="text-xs text-green-600 mt-1">
                        {language === "en" ? "Taken at" : "‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤Ç‡≤° ‡≤∏‡≤Æ‡≤Ø"}: {medicine.takenAt}
                      </p>
                    )}
                  </div>
                  <Badge className={getStatusColor(medicine.status)}>
                    {getStatusText(medicine.status)}
                  </Badge>
                </div>

                {medicine.status === "upcoming" && (
                  <Button 
                    size="sm" 
                    className="w-full bg-green-600 hover:bg-green-700"
                    onClick={() => handleMedicineTaken(medicine.id)}
                  >
                    {language === "en" ? "Mark as Taken" : "‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤ø"}
                  </Button>
                )}

                {medicine.status === "missed" && (
                  <div className="flex gap-2">
                    <Button 
                      size="sm" 
                      className="flex-1 bg-green-600 hover:bg-green-700"
                      onClick={() => handleMedicineTaken(medicine.id)}
                    >
                      {language === "en" ? "Take Now" : "‡≤à‡≤ó ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø"}
                    </Button>
                    <Button 
                      size="sm" 
                      variant="outline"
                      className="flex-1 border-yellow-300 text-yellow-700 hover:bg-yellow-50"
                    >
                      {language === "en" ? "Skip" : "‡≤¨‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å‡≤¨‡≤ø‡≤°‡≤ø"}
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Medicine Recognition Feature */}
      <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
        <CardContent className="p-4">
          <div className="flex items-center gap-3">
            <div className="bg-green-100 p-2 rounded-full">
              <Camera className="h-5 w-5 text-green-600" />
            </div>
            <div className="flex-1">
              <h4 className="font-medium text-green-800">
                {language === "en" ? "üîç Smart Medicine Recognition" : "üîç ‡≤∏‡≥ç‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ü‡≥ç ‡≤î‡≤∑‡≤ß ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≥Å‡≤µ‡≤ø‡≤ï‡≥Ü"}
              </h4>
              <p className="text-sm text-green-600">
                {language === "en" 
                  ? "Scan any medicine to get dosage instructions in Kannada" 
                  : "‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤™‡≥ç‡≤∞‡≤Æ‡≤æ‡≤£‡≤¶ ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤î‡≤∑‡≤ß‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥ç‡≤ï‡≥ç‡≤Ø‡≤æ‡≤®‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø"
                }
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MedicineTracker;
